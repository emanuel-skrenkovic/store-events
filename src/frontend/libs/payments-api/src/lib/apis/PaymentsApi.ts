/* tslint:disable */
/* eslint-disable */
/**
 * Store.Api.Payments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaymentCreateCommand,
    PaymentCreateCommandFromJSON,
    PaymentCreateCommandToJSON,
    PaymentRefundCommand,
    PaymentRefundCommandFromJSON,
    PaymentRefundCommandToJSON,
    PaymentVerifyCommand,
    PaymentVerifyCommandFromJSON,
    PaymentVerifyCommandToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface PaymentsActionsCreatePutRequest {
    paymentCreateCommand?: PaymentCreateCommand;
}

export interface PaymentsPaymentIdActionsCompletePutRequest {
    paymentId: string;
    paymentVerifyCommand?: PaymentVerifyCommand;
}

export interface PaymentsPaymentIdActionsRefundPutRequest {
    paymentId: string;
    paymentRefundCommand?: PaymentRefundCommand;
}

export interface PaymentsPaymentIdGetRequest {
    paymentId: string;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     */
    async paymentsActionsCreatePutRaw(requestParameters: PaymentsActionsCreatePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Payments/actions/create`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentCreateCommandToJSON(requestParameters.paymentCreateCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentsActionsCreatePut(requestParameters: PaymentsActionsCreatePutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.paymentsActionsCreatePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async paymentsPaymentIdActionsCompletePutRaw(requestParameters: PaymentsPaymentIdActionsCompletePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling paymentsPaymentIdActionsCompletePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Payments/{paymentId}/actions/complete`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentVerifyCommandToJSON(requestParameters.paymentVerifyCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentsPaymentIdActionsCompletePut(requestParameters: PaymentsPaymentIdActionsCompletePutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.paymentsPaymentIdActionsCompletePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async paymentsPaymentIdActionsRefundPutRaw(requestParameters: PaymentsPaymentIdActionsRefundPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling paymentsPaymentIdActionsRefundPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Payments/{paymentId}/actions/refund`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentRefundCommandToJSON(requestParameters.paymentRefundCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentsPaymentIdActionsRefundPut(requestParameters: PaymentsPaymentIdActionsRefundPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.paymentsPaymentIdActionsRefundPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async paymentsPaymentIdGetRaw(requestParameters: PaymentsPaymentIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling paymentsPaymentIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Payments/{paymentId}`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentsPaymentIdGet(requestParameters: PaymentsPaymentIdGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.paymentsPaymentIdGetRaw(requestParameters, initOverrides);
    }

}
