/* tslint:disable */
/* eslint-disable */
/**
 * Store.Api.CatalogueManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProductApiModel,
    ProductApiModelFromJSON,
    ProductApiModelToJSON,
    ProductCreateCommand,
    ProductCreateCommandFromJSON,
    ProductCreateCommandToJSON,
    ProductUpdateCommand,
    ProductUpdateCommandFromJSON,
    ProductUpdateCommandToJSON,
} from '../models';

export interface ProductsIdGetRequest {
    id: string;
}

export interface ProductsIdPutRequest {
    id: string;
    productUpdateCommand?: ProductUpdateCommand;
}

export interface ProductsPostRequest {
    productCreateCommand?: ProductCreateCommand;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     */
    async productsIdGetRaw(requestParameters: ProductsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductApiModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling productsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductApiModelFromJSON(jsonValue));
    }

    /**
     */
    async productsIdGet(requestParameters: ProductsIdGetRequest, initOverrides?: RequestInit): Promise<ProductApiModel> {
        const response = await this.productsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productsIdPutRaw(requestParameters: ProductsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling productsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductUpdateCommandToJSON(requestParameters.productUpdateCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productsIdPut(requestParameters: ProductsIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.productsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productsPostRaw(requestParameters: ProductsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductCreateCommandToJSON(requestParameters.productCreateCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productsPost(requestParameters: ProductsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.productsPostRaw(requestParameters, initOverrides);
    }

}
