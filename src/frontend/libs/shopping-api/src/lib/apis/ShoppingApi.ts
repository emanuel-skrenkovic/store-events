/* tslint:disable */
/* eslint-disable */
/**
 * Store.Api.Shopping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BuyerAddItemToCartCommand,
    BuyerAddItemToCartCommandFromJSON,
    BuyerAddItemToCartCommandToJSON,
    BuyerRemoveItemFromCartCommand,
    BuyerRemoveItemFromCartCommandFromJSON,
    BuyerRemoveItemFromCartCommandToJSON,
    Cart,
    CartFromJSON,
    CartToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface MyCartActionsAddItemPostRequest {
    buyerAddItemToCartCommand?: BuyerAddItemToCartCommand;
}

export interface MyCartActionsRemoveItemPostRequest {
    buyerRemoveItemFromCartCommand?: BuyerRemoveItemFromCartCommand;
}

export interface MyCartGetRequest {
    customerId?: string;
    sessionId?: string;
}

/**
 * 
 */
export class ShoppingApi extends runtime.BaseAPI {

    /**
     */
    async myCartActionsAddItemPostRaw(requestParameters: MyCartActionsAddItemPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/my/cart/actions/add-item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuyerAddItemToCartCommandToJSON(requestParameters.buyerAddItemToCartCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async myCartActionsAddItemPost(requestParameters: MyCartActionsAddItemPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.myCartActionsAddItemPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async myCartActionsRemoveItemPostRaw(requestParameters: MyCartActionsRemoveItemPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/my/cart/actions/remove-item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuyerRemoveItemFromCartCommandToJSON(requestParameters.buyerRemoveItemFromCartCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async myCartActionsRemoveItemPost(requestParameters: MyCartActionsRemoveItemPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.myCartActionsRemoveItemPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async myCartGetRaw(requestParameters: MyCartGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Cart>> {
        const queryParameters: any = {};

        if (requestParameters.customerId !== undefined) {
            queryParameters['customerId'] = requestParameters.customerId;
        }

        if (requestParameters.sessionId !== undefined) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/my/cart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     */
    async myCartGet(requestParameters: MyCartGetRequest, initOverrides?: RequestInit): Promise<Cart> {
        const response = await this.myCartGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
